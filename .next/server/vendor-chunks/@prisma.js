"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma";
exports.ids = ["vendor-chunks/@prisma"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/entry.node.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@prisma/extension-accelerate/dist/esm/entry.node.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withAccelerate: () => (/* binding */ withAccelerate)\n/* harmony export */ });\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extension.js */ \"(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/extension.js\");\n/* harmony import */ var _node_fetch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node-fetch.js */ \"(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/node-fetch.js\");\n\n\nfunction withAccelerate() {\n    const fetch = \"fetch\" in globalThis ? globalThis.fetch : _node_fetch_js__WEBPACK_IMPORTED_MODULE_1__.fetch;\n    return (0,_extension_js__WEBPACK_IMPORTED_MODULE_0__.makeAccelerateExtension)(fetch);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcHJpc21hL2V4dGVuc2lvbi1hY2NlbGVyYXRlL2Rpc3QvZXNtL2VudHJ5Lm5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlEO0FBQ0o7QUFDOUMsU0FBU0c7SUFDWixNQUFNRixRQUFRLFdBQVdHLGFBQWFBLFdBQVdILEtBQUssR0FBR0MsaURBQVNBO0lBQ2xFLE9BQU9GLHNFQUF1QkEsQ0FBQ0M7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0YWRtaW5naXRodWJzdGFydGVyLy4vbm9kZV9tb2R1bGVzL0BwcmlzbWEvZXh0ZW5zaW9uLWFjY2VsZXJhdGUvZGlzdC9lc20vZW50cnkubm9kZS5qcz81MTY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VBY2NlbGVyYXRlRXh0ZW5zaW9uIH0gZnJvbSBcIi4vZXh0ZW5zaW9uLmpzXCI7XG5pbXBvcnQgeyBmZXRjaCBhcyBub2RlRmV0Y2ggfSBmcm9tIFwiLi9ub2RlLWZldGNoLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gd2l0aEFjY2VsZXJhdGUoKSB7XG4gICAgY29uc3QgZmV0Y2ggPSBcImZldGNoXCIgaW4gZ2xvYmFsVGhpcyA/IGdsb2JhbFRoaXMuZmV0Y2ggOiBub2RlRmV0Y2g7XG4gICAgcmV0dXJuIG1ha2VBY2NlbGVyYXRlRXh0ZW5zaW9uKGZldGNoKTtcbn1cbiJdLCJuYW1lcyI6WyJtYWtlQWNjZWxlcmF0ZUV4dGVuc2lvbiIsImZldGNoIiwibm9kZUZldGNoIiwid2l0aEFjY2VsZXJhdGUiLCJnbG9iYWxUaGlzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/entry.node.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/extension.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@prisma/extension-accelerate/dist/esm/extension.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeAccelerateExtension: () => (/* binding */ makeAccelerateExtension)\n/* harmony export */ });\n/* harmony import */ var _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client/scripts/default-index.js */ \"@prisma/client/scripts/default-index.js\");\n/* harmony import */ var _semver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./semver.js */ \"(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/semver.js\");\n/* harmony import */ var _user_agent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./user-agent.js */ \"(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/user-agent.js\");\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /// <reference lib=\"dom\" />\n// importing default is needed for ESM compatibility\n// default-index is a CJS file, so named exports are not resolved\n// the types create a separate resolution issue, so they are still imported by name\n\n\n\nconst EXTENSION_NAME = \"@prisma/extension-accelerate\";\nfunction makeWithCacheHeaders(fetcher) {\n    const userAgent = (0,_user_agent_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgent)();\n    let machineHint = undefined;\n    return async (params)=>{\n        const { args } = params;\n        const { cacheStrategy, __accelerateInfo = false, ...rest } = args;\n        let info = null;\n        const { __internalParams, query } = params;\n        __internalParams.customDataProxyFetch = ()=>{\n            return async (url, options)=>{\n                const cacheControl = new Array();\n                if (typeof cacheStrategy?.ttl === \"number\") {\n                    cacheControl.push(`max-age=${cacheStrategy.ttl}`);\n                }\n                if (typeof cacheStrategy?.swr === \"number\") {\n                    cacheControl.push(`stale-while-revalidate=${cacheStrategy.swr}`);\n                }\n                options.headers = {\n                    ...options.headers,\n                    \"cache-control\": cacheControl.length > 0 ? cacheControl.join(\",\") : `no-cache`,\n                    \"user-agent\": userAgent\n                };\n                if (machineHint) {\n                    options.headers[\"accelerate-query-engine-jwt\"] = machineHint;\n                }\n                const response = await fetcher(url, options);\n                info = {\n                    cacheStatus: response.headers.get(\"accelerate-cache-status\"),\n                    lastModified: new Date(response.headers.get(\"last-modified\") ?? \"\"),\n                    region: response.headers.get(\"cf-ray\")?.split(\"-\")[1] ?? \"unspecified\",\n                    requestId: response.headers.get(\"cf-ray\") ?? \"unspecified\",\n                    signature: response.headers.get(\"accelerate-signature\") ?? \"unspecified\"\n                };\n                machineHint = response.headers.get(\"accelerate-query-engine-jwt\") ?? undefined;\n                return response;\n            };\n        };\n        if (__accelerateInfo) {\n            const data = await query(rest, __internalParams);\n            return {\n                data,\n                info\n            };\n        } else {\n            return query(rest, __internalParams);\n        }\n    };\n}\nfunction makeAccelerateExtension(fetcher) {\n    // ctx.$parent was added in 5.1.0 to support iTx in extensions\n    const enableCtxParent = (0,_semver_js__WEBPACK_IMPORTED_MODULE_1__.compareSemVer)(\"5.1.0\", _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.prismaVersion.client) >= 0;\n    return _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.defineExtension((client)=>{\n        const withCacheHeaders = makeWithCacheHeaders(fetcher);\n        const xclient = client.$extends({\n            name: EXTENSION_NAME,\n            query: {\n                $allModels: {\n                    // also apply withCacheHeaders to mutations for machine hint benefit\n                    $allOperations: withCacheHeaders\n                }\n            }\n        });\n        return xclient.$extends({\n            name: EXTENSION_NAME,\n            model: {\n                $allModels: {\n                    // TODO: these functions are repetitive. Is there a type we can use to generic this?\n                    // TODO: can we define these in a map that ensures query and model overrides stay in sync/\n                    aggregate (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.aggregate(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.aggregate({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    },\n                    count (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.count(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.count({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    },\n                    findFirst (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.findFirst(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.findFirst({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    },\n                    findFirstOrThrow (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.findFirstOrThrow(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.findFirstOrThrow({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    },\n                    findMany (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.findMany(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.findMany({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    },\n                    findUnique (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.findUnique(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.findUnique({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    },\n                    findUniqueOrThrow (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.findUniqueOrThrow(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.findUniqueOrThrow({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    },\n                    groupBy (args) {\n                        const ctx = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this);\n                        const model = enableCtxParent ? ctx.$parent[ctx.$name] : xclient[ctx.name];\n                        const prismaPromise = model.groupBy(args);\n                        return Object.assign(prismaPromise, {\n                            withAccelerateInfo () {\n                                return model.groupBy({\n                                    ...args,\n                                    __accelerateInfo: true\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/extension.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/node-fetch.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@prisma/extension-accelerate/dist/esm/node-fetch.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n * Imitates `fetch` via `https` to only suit our needs, it does nothing more.\n * This is because we cannot bundle `node-fetch` as it uses many other Node.js\n * utilities, while also bloating our bundles. This approach is much leaner.\n * @param url\n * @param options\n * @returns\n */ async function fetch(url, options = {}) {\n    const httpsOptions = buildOptions(options);\n    const incomingData = new Array();\n    const { origin } = new URL(url);\n    return new Promise((resolve, reject)=>{\n        // we execute the https request and build a fetch response out of it\n        const request = node_https__WEBPACK_IMPORTED_MODULE_0__.request(url, httpsOptions, (response)=>{\n            const { statusCode = 200, headers: { location } } = response;\n            if (statusCode >= 301 && statusCode <= 399 && location) {\n                if (location.startsWith(\"http\") === false) {\n                    resolve(fetch(`${origin}${location}`, options));\n                } else {\n                    resolve(fetch(location, options));\n                }\n            }\n            response.on(\"data\", (chunk)=>incomingData.push(chunk));\n            response.on(\"end\", ()=>resolve(buildResponse(incomingData, response)));\n            response.on(\"error\", reject);\n        });\n        request.on(\"error\", reject);\n        request.end(options.body ?? \"\");\n    });\n}\n/**\n * Build http headers from fetch-like headers\n * @param options\n * @returns\n */ function buildHeaders(options) {\n    return {\n        ...options.headers,\n        \"Content-Type\": \"application/json\"\n    };\n}\n/**\n * Build http options from fetch-like options\n * @param options\n * @returns\n */ function buildOptions(options) {\n    return {\n        method: options.method,\n        headers: buildHeaders(options)\n    };\n}\n/**\n * Build a fetch-like response from an http response\n * @param incomingData\n * @param response\n * @returns\n */ function buildResponse(incomingData, response) {\n    const { statusCode = 200, url, headers } = response;\n    return {\n        text: ()=>Promise.resolve(Buffer.concat(incomingData).toString()),\n        json: ()=>Promise.resolve(JSON.parse(Buffer.concat(incomingData).toString())),\n        ok: statusCode >= 200 && statusCode <= 299,\n        status: statusCode,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        url: url,\n        headers: new NodeHeaders(headers)\n    };\n}\nclass NodeHeaders {\n    #headers;\n    constructor(init = {}){\n        this.#headers = new Map();\n        for (const [key, value] of Object.entries(init)){\n            if (typeof value === \"string\") {\n                this.#headers.set(key, value);\n            } else if (Array.isArray(value)) {\n                for (const val of value){\n                    this.#headers.set(key, val);\n                }\n            }\n        }\n    }\n    append(name, value) {\n        this.#headers.set(name, value);\n    }\n    delete(name) {\n        this.#headers.delete(name);\n    }\n    get(name) {\n        return this.#headers.get(name) ?? null;\n    }\n    has(name) {\n        return this.#headers.has(name);\n    }\n    set(name, value) {\n        this.#headers.set(name, value);\n    }\n    forEach(callbackfn, thisArg) {\n        for (const [key, value] of this.#headers){\n            callbackfn.call(thisArg, value, key, this);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/node-fetch.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/semver.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@prisma/extension-accelerate/dist/esm/semver.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareSemVer: () => (/* binding */ compareSemVer)\n/* harmony export */ });\n/**\n * Compares two SemVer strings.\n * @returns positive if b > a, negative if b < a, and 0 if versions are equal\n */ function compareSemVer(a, b) {\n    const [major1 = 0, minor1 = 0, patch1 = 0] = a.split(\".\").map(Number);\n    const [major2 = 0, minor2 = 0, patch2 = 0] = b.split(\".\").map(Number);\n    const major = major2 - major1;\n    const minor = minor2 - minor1;\n    const patch = patch2 - patch1;\n    return major || minor || patch;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcHJpc21hL2V4dGVuc2lvbi1hY2NlbGVyYXRlL2Rpc3QvZXNtL3NlbXZlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ00sU0FBU0EsY0FBY0MsQ0FBQyxFQUFFQyxDQUFDO0lBQzlCLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDLEVBQUVDLFNBQVMsQ0FBQyxFQUFFQyxTQUFTLENBQUMsQ0FBQyxHQUFHSixFQUFFSyxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDQztJQUM5RCxNQUFNLENBQUNDLFNBQVMsQ0FBQyxFQUFFQyxTQUFTLENBQUMsRUFBRUMsU0FBUyxDQUFDLENBQUMsR0FBR1QsRUFBRUksS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQ0M7SUFDOUQsTUFBTUksUUFBUUgsU0FBU047SUFDdkIsTUFBTVUsUUFBUUgsU0FBU047SUFDdkIsTUFBTVUsUUFBUUgsU0FBU047SUFDdkIsT0FBT08sU0FBU0MsU0FBU0M7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0YWRtaW5naXRodWJzdGFydGVyLy4vbm9kZV9tb2R1bGVzL0BwcmlzbWEvZXh0ZW5zaW9uLWFjY2VsZXJhdGUvZGlzdC9lc20vc2VtdmVyLmpzPzBlN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21wYXJlcyB0d28gU2VtVmVyIHN0cmluZ3MuXG4gKiBAcmV0dXJucyBwb3NpdGl2ZSBpZiBiID4gYSwgbmVnYXRpdmUgaWYgYiA8IGEsIGFuZCAwIGlmIHZlcnNpb25zIGFyZSBlcXVhbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVNlbVZlcihhLCBiKSB7XG4gICAgY29uc3QgW21ham9yMSA9IDAsIG1pbm9yMSA9IDAsIHBhdGNoMSA9IDBdID0gYS5zcGxpdChcIi5cIikubWFwKE51bWJlcik7XG4gICAgY29uc3QgW21ham9yMiA9IDAsIG1pbm9yMiA9IDAsIHBhdGNoMiA9IDBdID0gYi5zcGxpdChcIi5cIikubWFwKE51bWJlcik7XG4gICAgY29uc3QgbWFqb3IgPSBtYWpvcjIgLSBtYWpvcjE7XG4gICAgY29uc3QgbWlub3IgPSBtaW5vcjIgLSBtaW5vcjE7XG4gICAgY29uc3QgcGF0Y2ggPSBwYXRjaDIgLSBwYXRjaDE7XG4gICAgcmV0dXJuIG1ham9yIHx8IG1pbm9yIHx8IHBhdGNoO1xufVxuIl0sIm5hbWVzIjpbImNvbXBhcmVTZW1WZXIiLCJhIiwiYiIsIm1ham9yMSIsIm1pbm9yMSIsInBhdGNoMSIsInNwbGl0IiwibWFwIiwiTnVtYmVyIiwibWFqb3IyIiwibWlub3IyIiwicGF0Y2gyIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/semver.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/user-agent.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@prisma/extension-accelerate/dist/esm/user-agent.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserAgent: () => (/* binding */ getUserAgent)\n/* harmony export */ });\n/* harmony import */ var _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client/scripts/default-index.js */ \"@prisma/client/scripts/default-index.js\");\n\n/**\n * Generates a User-Agent string derived from the current execution environment.\n */ function getUserAgent() {\n    const prismaVersion = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.prismaVersion;\n    const parts = [\n        getRuntimeSegment(),\n        `PrismaEngine/${prismaVersion.engine}`,\n        `PrismaClient/${prismaVersion.client}`\n    ];\n    return parts.join(\" \");\n}\n/**\n * Generates a User-Agent segment for the JavaScript runtime environment.\n */ function getRuntimeSegment() {\n    if (typeof navigator !== \"undefined\") {\n        // Deno, Bun, Cloudflare Workers, general WinterCG compat\n        return navigator.userAgent;\n    } else if (typeof process !== \"undefined\" && typeof process.versions !== \"undefined\") {\n        return `Node/${process.versions.node} (${process.platform}; ${process.arch})`;\n    } else if (\"EdgeRuntime\" in globalThis) {\n        return `Vercel-Edge-Runtime`;\n    } else {\n        return `UnknownRuntime`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcHJpc21hL2V4dGVuc2lvbi1hY2NlbGVyYXRlL2Rpc3QvZXNtL3VzZXItYWdlbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0U7QUFDcEU7O0NBRUMsR0FDTSxTQUFTQztJQUNaLE1BQU1DLGdCQUFnQkYsMkVBQW9CLENBQUNFLGFBQWE7SUFDeEQsTUFBTUUsUUFBUTtRQUNWQztRQUNBLENBQUMsYUFBYSxFQUFFSCxjQUFjSSxNQUFNLENBQUMsQ0FBQztRQUN0QyxDQUFDLGFBQWEsRUFBRUosY0FBY0ssTUFBTSxDQUFDLENBQUM7S0FDekM7SUFDRCxPQUFPSCxNQUFNSSxJQUFJLENBQUM7QUFDdEI7QUFDQTs7Q0FFQyxHQUNELFNBQVNIO0lBQ0wsSUFBSSxPQUFPSSxjQUFjLGFBQWE7UUFDbEMseURBQXlEO1FBQ3pELE9BQU9BLFVBQVVDLFNBQVM7SUFDOUIsT0FDSyxJQUFJLE9BQU9DLFlBQVksZUFDeEIsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGFBQWE7UUFDekMsT0FBTyxDQUFDLEtBQUssRUFBRUQsUUFBUUMsUUFBUSxDQUFDQyxJQUFJLENBQUMsRUFBRSxFQUFFRixRQUFRRyxRQUFRLENBQUMsRUFBRSxFQUFFSCxRQUFRSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLE9BQ0ssSUFBSSxpQkFBaUJDLFlBQVk7UUFDbEMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0lBQ2hDLE9BQ0s7UUFDRCxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQzNCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0YWRtaW5naXRodWJzdGFydGVyLy4vbm9kZV9tb2R1bGVzL0BwcmlzbWEvZXh0ZW5zaW9uLWFjY2VsZXJhdGUvZGlzdC9lc20vdXNlci1hZ2VudC5qcz81OTk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcmlzbWFEZWZhdWx0IGZyb20gXCJAcHJpc21hL2NsaWVudC9zY3JpcHRzL2RlZmF1bHQtaW5kZXguanNcIjtcbi8qKlxuICogR2VuZXJhdGVzIGEgVXNlci1BZ2VudCBzdHJpbmcgZGVyaXZlZCBmcm9tIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJBZ2VudCgpIHtcbiAgICBjb25zdCBwcmlzbWFWZXJzaW9uID0gUHJpc21hRGVmYXVsdC5QcmlzbWEucHJpc21hVmVyc2lvbjtcbiAgICBjb25zdCBwYXJ0cyA9IFtcbiAgICAgICAgZ2V0UnVudGltZVNlZ21lbnQoKSxcbiAgICAgICAgYFByaXNtYUVuZ2luZS8ke3ByaXNtYVZlcnNpb24uZW5naW5lfWAsXG4gICAgICAgIGBQcmlzbWFDbGllbnQvJHtwcmlzbWFWZXJzaW9uLmNsaWVudH1gLFxuICAgIF07XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBVc2VyLUFnZW50IHNlZ21lbnQgZm9yIHRoZSBKYXZhU2NyaXB0IHJ1bnRpbWUgZW52aXJvbm1lbnQuXG4gKi9cbmZ1bmN0aW9uIGdldFJ1bnRpbWVTZWdtZW50KCkge1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIC8vIERlbm8sIEJ1biwgQ2xvdWRmbGFyZSBXb3JrZXJzLCBnZW5lcmFsIFdpbnRlckNHIGNvbXBhdFxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGBOb2RlLyR7cHJvY2Vzcy52ZXJzaW9ucy5ub2RlfSAoJHtwcm9jZXNzLnBsYXRmb3JtfTsgJHtwcm9jZXNzLmFyY2h9KWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKFwiRWRnZVJ1bnRpbWVcIiBpbiBnbG9iYWxUaGlzKSB7XG4gICAgICAgIHJldHVybiBgVmVyY2VsLUVkZ2UtUnVudGltZWA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYFVua25vd25SdW50aW1lYDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUHJpc21hRGVmYXVsdCIsImdldFVzZXJBZ2VudCIsInByaXNtYVZlcnNpb24iLCJQcmlzbWEiLCJwYXJ0cyIsImdldFJ1bnRpbWVTZWdtZW50IiwiZW5naW5lIiwiY2xpZW50Iiwiam9pbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJwbGF0Zm9ybSIsImFyY2giLCJnbG9iYWxUaGlzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@prisma/extension-accelerate/dist/esm/user-agent.js\n");

/***/ })

};
;